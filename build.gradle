buildscript {
	repositories {
		mavenCentral()
		maven { url 'http://public-maven.classmethod.info/release' }
	}
	dependencies {
		classpath 'org.hibernate.build.gradle:version-injection-plugin:1.0.0'
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0'
		classpath 'jp.classmethod.aws:gradle-aws-plugin:0.11'
	}
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'version-injection'
apply plugin: 'license'

defaultTasks 'clean', 'build'

// ======== Generic ========
group = 'jp.classmethod.aws'
version = '0.8'
ext {
	artifactId = 'brian'
	defaultEncoding = 'UTF-8'
}

// ======== Java ========
sourceCompatibility = targetCompatibility = 1.7
tasks.withType(AbstractCompile) each {
	it.options.encoding = ext.defaultEncoding
}

ext {
	junitVersion = '4.11'
	hamcrestVersion = '1.3'
	mockitoCoreVersion = '1.9.5'

	slf4jVersion = '1.7.7'
	logbackVersion = '1.1.2'
	
	springVersion = '3.2.4.RELEASE'
	mysqlVersion = '5.1.22'
	guavaVersion = '15.0'
	gsonVersion = '2.2.2'
	baseunitsVersion = '2.11'
	awsJavaSdkVersion = '1.9.2'
	jettyVersion = '9.0.4.v20130625'
}

compileJava {
	options.compilerArgs << '-Xlint:deprecation'
}

test {
	exclude '**/*$*', '**/*Tests.class', '**/examples/**'
	reports {
		html.enabled = true
		junitXml.outputPerTestCase = false
	}
}

// version injection
versionInjection {
	into('jp.classmethod.aws.brian.Version', 'getVersionString')
}

// create source and javadoc bundles
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

repositories {
	mavenCentral()
	maven {
		url "http://repo.springsource.org/release"
	}
	maven {
		// for log4jdbc-remix
		url "https://oss.sonatype.org/content/repositories/releases"
	}
	maven {
		// for baseunits
		url "http://maven.xet.jp/release"
	}
}

configurations {
	jettyServer
}

dependencies {
	// Logging
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
	compile "ch.qos.logback:logback-classic:$logbackVersion"
	compile ('org.lazyluke:log4jdbc-remix:0.2.7') {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
	
	// Spring
	compile "org.springframework:spring-context-support:$springVersion"
	compile "org.springframework:spring-tx:$springVersion"
	compile "org.springframework:spring-jdbc:$springVersion"
	compile "org.springframework:spring-webmvc:$springVersion"
	
	// Other
	compile "mysql:mysql-connector-java:$mysqlVersion"
	compile "com.google.guava:guava:$guavaVersion"
	compile "commons-dbcp:commons-dbcp:1.4"
	compile "com.google.code.gson:gson:$gsonVersion"
	compile "com.amazonaws:aws-java-sdk-sns:$awsJavaSdkVersion"
	compile "org.quartz-scheduler:quartz:2.2.0"
	compile "jp.xet:baseunits:$baseunitsVersion"
	
	// Servlet API
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	jettyServer "org.eclipse.jetty:jetty-server:$jettyVersion"
	jettyServer "org.eclipse.jetty:jetty-ant:$jettyVersion"
	
	// Testing
	testCompile "junit:junit:$junitVersion"
	testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
	testCompile "org.springframework:spring-test:$springVersion"
}

// ======== WAR ========

ext {
	jettyStop = '9999'
	jettyStopKey = 'jettystop'
	port = '8080'
	contextPath = '/'
}

task setSystemProperties << {
	assert project.hasProperty('JDBC_CONNECTION_STRING'): "JDBC_CONNECTION_STRING is required"
	assert project.hasProperty('DB_USERNAME'): "DB_USERNAME is required"
	assert project.hasProperty('DB_PASSWORD'): "DB_PASSWORD is required"
	assert project.hasProperty('BRIAN_TOPIC_ARN'): "BRIAN_TOPIC_ARN is required"
	
	System.setProperty 'JDBC_CONNECTION_STRING', project.JDBC_CONNECTION_STRING
	System.setProperty 'DB_USERNAME', project.DB_USERNAME
	System.setProperty 'DB_PASSWORD', project.DB_PASSWORD
	System.setProperty 'BRIAN_TOPIC_ARN', project.BRIAN_TOPIC_ARN
	System.setProperty 'aws.accessKeyId', project.awsAccessKey
	System.setProperty 'aws.secretKey', project.awsSecretKey
	
	if (project.hasProperty('springProfilesActive')) {
		System.setProperty 'spring.profiles.active', project.springProfilesActive
	}
	if (project.hasProperty('logbackConfigurationFile')) {
		System.setProperty 'logback.configurationFile', project.logbackConfigurationFile
	}
}

ant {
	taskdef(name: 'jettyRun', classname: 'org.eclipse.jetty.ant.JettyRunTask', classpath: configurations.jettyServer.asPath)
	taskdef(name: 'jettyStop', classname: 'org.eclipse.jetty.ant.JettyStopTask', classpath: configurations.jettyServer.asPath)
}
[
	task(jettyRun(dependsOn: [classes, setSystemProperties])) << {
		ant.jettyRun(stopPort: jettyStop, stopKey: jettyStopKey, jettyPort: port, scanIntervalSeconds: 3) {
			webApp(war: webAppDir, contextPath: contextPath, parentLoaderPriority: true,
				extraClasspath: org.gradle.util.CollectionUtils.join(",", configurations.compile.files))
		}
	},
	task(jettyRunWar(dependsOn: [war, setSystemProperties])) << {
		ant.jettyRun(jettyPort: port) {
			webApp(war: war.archivePath, contextPath: contextPath)
		}
	},
	task(jettyRunAsDaemon(dependsOn: [classes, setSystemProperties])) << {
		ant.jettyRun(daemon: true, stopPort: jettyStop, stopKey: jettyStopKey, jettyPort: port, scanIntervalSeconds: 3) {
			webApp(war: webAppDir, contextPath: contextPath, parentLoaderPriority: true,
				extraClasspath: org.gradle.util.CollectionUtils.join(",", configurations.compile.files))
		}
	},
	task(jettyStop(dependsOn: [classes, setSystemProperties])) << {
		ant.jettyStop(stopPort: jettyStop, stopKey: jettyStopKey) {
		}
	}
].each { it.group = 'Local' }

sourceSets.main.output.classesDir = 'src/main/webapp/WEB-INF/classes'
sourceSets.main.output.resourcesDir = 'src/main/webapp/WEB-INF/classes'

clean {
	delete << 'src/main/webapp/WEB-INF/classes'
}

// ======== release tasks ========
apply plugin: 'aws'
aws {
	assert project.hasProperty('awsAccessKeyForRelease') && project.hasProperty('awsSecretKeyForRelease'): "AWS credential is required"
	accessKeyId awsAccessKeyForRelease
	secretKey awsSecretKeyForRelease
	region 'ap-northeast-1'
}

apply plugin: 'aws-s3'
task uploadWar(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: war) {
	bucketName 'cm-public-eb-applications'
	key "${artifactId}/${artifactId}-${version}.war"
	file project.war.archivePath
	overwrite project.version.endsWith('-SNAPSHOT')
}

task uploadArchives(dependsOn: uploadWar)


// ======== wrapper ========
task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}

// ======== License =======
license {
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	header rootProject.file('copyright/HEADER')
	strictCheck true
	mapping {
		java = 'SLASHSTAR_STYLE'
	}
}
