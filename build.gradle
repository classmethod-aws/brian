// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
		maven { url "http://repo.spring.io/release" }
		maven { url 'http://public-maven.classmethod.info/release' }
	}
	dependencies {
		classpath 'org.hibernate.build.gradle:version-injection-plugin:1.0.0'
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE'
		classpath 'jp.classmethod.aws:gradle-aws-plugin:0.13.2'
	}
}

plugins {
	id "com.github.hierynomus.license" version "0.11.0"
}


// ======== Project configurations ========
allprojects {
	apply plugin: 'base'
	group = 'jp.classmethod.aws.brian'
	version = '0.12-SNAPSHOT'
}

def javaProjects() {
	subprojects
}
def warProjects() {
	[project(':brian-server')]
}

configure(javaProjects()) {
	apply plugin: 'java'
	ext {
		// test dependencies
		junitVersion = '4.11'
		hamcrestVersion = '1.3'
		mockitoCoreVersion = '1.9.5'
		
		// Java spec
		servletApiVersion = '3.1.0'

		// loggers
		slf4jVersion = '1.7.7'
		logbackVersion = '1.1.2'

		// spring framework
		springVersion = '4.1.1.RELEASE'
		springBootVersion = '1.1.8.RELEASE'
		mysqlVersion = '5.1.22'
		guavaVersion = '18.0'
		jacksonVersion = '2.4.3'
		quartzVersion = '2.2.0'
		gsonVersion = '2.2.2'
		baseunitsVersion = '2.13'
		awsJavaSdkVersion = '1.9.2'
	}

	ext.defaultEncoding = 'UTF-8'
	sourceCompatibility = targetCompatibility = 1.8
	tasks.withType(AbstractCompile) each {
		it.options.encoding = ext.defaultEncoding
	}
	compileJava {
		options.compilerArgs << '-Xlint:deprecation'
	}

	test {
		exclude '**/*$*', '**/*Tests.class', '**/examples/**'
		reports {
			html.enabled = true
			junitXml.outputPerTestCase = false
		}
	}

	configurations.all {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.name == 'commons-logging') {
				// prefer 'jcl-over-slf4j' over 'commons-logging':
				details.useTarget "org.slf4j:jcl-over-slf4j:$slf4jVersion"
			}
			if (details.requested.name == 'log4j') {
				// prefer 'log4j-over-slf4j' over 'log4j':
				details.useTarget "org.slf4j:log4j-over-slf4j:$slf4jVersion"
			}
		}
	}

	repositories {
		mavenCentral()
		maven {
			url "http://repo.spring.io/release"
		}
		maven {
			// for log4jdbc-remix
			url "https://oss.sonatype.org/content/repositories/releases"
		}
		maven {
			// for baseunits
			url "http://maven.xet.jp/release"
		}
	}

	// ======== create source and javadoc bundles ========

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

configure(warProjects()) {
	apply plugin: 'war'
	configurations {
		providedRuntime
	}
	dependencies {
		providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:1.1.8.RELEASE"
	}
	
	// ======== local boot ========
	sourceSets.main.output.classesDir = 'src/main/webapp/WEB-INF/classes'
	sourceSets.main.output.resourcesDir = 'src/main/webapp/WEB-INF/classes'

	clean {
		delete << 'src/main/webapp/WEB-INF/classes'
	}
	
	apply plugin: 'spring-boot'
	bootRun {
		systemProperty('JDBC_CONNECTION_STRING', project.JDBC_CONNECTION_STRING)
		systemProperty('DB_USERNAME', project.DB_USERNAME)
		systemProperty('DB_PASSWORD', project.DB_PASSWORD)
		systemProperty('BRIAN_TOPIC_ARN', project.BRIAN_TOPIC_ARN)
		systemProperty('aws.accessKeyId', project.awsAccessKey)
		systemProperty('aws.secretKey', project.awsSecretKey)
		
		if (project.hasProperty('springProfilesActive')) {
			systemProperty('spring.profiles.active', project.springProfilesActive)
		}
		if (project.hasProperty('logbackConfigurationFile')) {
			systemProperty('logback.configurationFile', project.logbackConfigurationFile)
		}
	}
}


// ======== license headers ========
apply plugin: 'license'

license {
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	header rootProject.file('copyright/HEADER')
	strictCheck true
	mapping {
		java = 'SLASHSTAR_STYLE'
	}
	exclude '**/*.json'
}


// ======== release ========
apply plugin: 'aws'

aws {
	assert project.hasProperty('awsAccessKeyForRelease') && project.hasProperty('awsSecretKeyForRelease'): "AWS credential is required"
	accessKeyId project.awsAccessKeyForRelease
	secretKey project.awsSecretKeyForRelease
	region 'ap-northeast-1'
}

task uploadArchives(dependsOn: [':brian-sdk:uploadArchives', ':brian-server:uploadWar'])


// ======== Tasks ========
task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}
