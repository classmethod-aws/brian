// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE"
	}
}


// ======== Generic ========
ext.artifactId = 'brian-server'
defaultTasks 'clean', 'build', 'bootRun'


// ======== Java ========
apply plugin: 'java'
sourceCompatibility = targetCompatibility = 1.8
tasks.withType(AbstractCompile) each {
	it.options.encoding = ext.defaultEncoding
}

compileJava {
	options.compilerArgs << '-Xlint:deprecation'
}

test {
	exclude '**/*$*', '**/*Tests.class', '**/examples/**'
	reports {
		html.enabled = true
		junitXml.outputPerTestCase = false
	}
}


// ======== dependency management ========

configurations {
	providedRuntime
}
dependencies {
	// Spring
	compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
	compile "org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion"
	compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
	compile "org.springframework:spring-context-support:$springVersion"
	compile "org.springframework:spring-webmvc:$springVersion"

	// Logging
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
	compile "ch.qos.logback:logback-classic:$logbackVersion"
	compile ('org.lazyluke:log4jdbc-remix:0.2.7') {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
	
	
	// Other
	compile "mysql:mysql-connector-java:$mysqlVersion"
	compile "org.flywaydb:flyway-core:3.2.1"
	compile "com.google.guava:guava:$guavaVersion"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
	compile "commons-dbcp:commons-dbcp:1.4"
	compile "com.google.code.gson:gson:$gsonVersion"
	compile "com.amazonaws:aws-java-sdk-sns:$awsJavaSdkVersion"
	compile "org.quartz-scheduler:quartz:$quartzVersion"
	compile "jp.xet:baseunits:$baseunitsVersion"
	compile project(':brian-sdk')
	
	// Servlet API
//	providedCompile "javax.servlet:javax.servlet-api:$servletApiVersion"
//	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:1.1.8.RELEASE"
	
	// Testing
	testCompile "junit:junit:$junitVersion"
	testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
	testCompile "org.springframework:spring-test:$springVersion"
}

repositories {
	mavenCentral()
	maven {
		url "http://repo.spring.io/release"
	}
	maven {
		// for log4jdbc-remix
		url "https://oss.sonatype.org/content/repositories/releases"
	}
	maven {
		// for baseunits
		url "http://maven.xet.jp/release"
	}
}


// ======== version injection ========
apply plugin: 'version-injection'

versionInjection {
	into('jp.classmethod.aws.brian.Version', 'getVersionString')
}


// ======== boot ========
apply plugin: 'spring-boot'
bootRun {
	systemProperty('JDBC_CONNECTION_STRING', project.JDBC_CONNECTION_STRING)
	systemProperty('DB_USERNAME', project.DB_USERNAME)
	systemProperty('DB_PASSWORD', project.DB_PASSWORD)
	systemProperty('BRIAN_TOPIC_ARN', project.BRIAN_TOPIC_ARN)
	systemProperty('aws.profile', project.awsProfile)
	
	if (project.hasProperty('springProfilesActive')) {
		systemProperty('spring.profiles.active', project.springProfilesActive)
	}
	if (project.hasProperty('logbackConfigurationFile')) {
		systemProperty('logging.config', project.logbackConfigurationFile)
	}
}

sourceSets.main.output.classesDir = 'src/main/webapp/WEB-INF/classes'
sourceSets.main.output.resourcesDir = 'src/main/webapp/WEB-INF/classes'

clean {
	delete << 'src/main/webapp/WEB-INF/classes'
}


// ======== release ========
apply plugin: 'aws-s3'

aws {
	assert project.hasProperty('awsProfileForRelease'): "AWS profile for release is required"
	profileName project.awsProfileForRelease
	region 'ap-northeast-1'
}

// ======== packaging and release : docker ========
jar {
	manifest {
		attributes(
			'Implementation-Title': artifactId,
			"Implementation-Version": version,
			"Implementation-Timestamp": new Date()
		)
	}
}

task createDockerfile(type: Copy, dependsOn: jar) {
	from 'src/main/bundle/Dockerfile'
	into 'build/bundle'
	expand(jarFilename: jar.archiveName, artifactId: project.ext.artifactId)
}

task createBundleResources(type: Copy) {
	from 'src/main/bundle'
	into 'build/bundle'
	exclude 'src/main/bundle/Dockerfile'
}

task createBundle(type: Zip, dependsOn: [createDockerfile, createBundleResources, bootRepackage]) {
	archiveName = jar.archiveName.substring(0, jar.archiveName.length() - 4) + '.zip'
	from 'build/bundle'
	from jar.archivePath
}

task uploadBundle(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createBundle) {
	description "Upload ${artifactId} application bundle file to S3."
	
	bucketName 'cm-public-eb-applications'
	key "${artifactId}/${artifactId}-${version}.zip"
	file project.createBundle.archivePath
	overwrite project.version.endsWith('-SNAPSHOT')
}

// ======== packaging and release : cfn ========
task createCfnTemplate(type: Copy) {
	from 'src/main/cloudformation'
	into 'build/cloudformation'
	expand(version: project.version)
}

task uploadDemoTemplate(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createCfnTemplate) {
	bucketName 'cm-public-eb-applications'
	key "${artifactId}/${artifactId}-${version}.template"
	file file('build/cloudformation/brian-demo.template')
	overwrite project.version.endsWith('-SNAPSHOT')
} << {
	println "open https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#cstack=sn~brian-demo|turl~${resourceUrl}"
}
